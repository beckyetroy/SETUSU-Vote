<!doctype html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Fonts -->
        <link href='https://fonts.googleapis.com/css?family=Inter' rel='stylesheet'>
        <link href='https://fonts.googleapis.com/css?family=Roboto Condensed' rel='stylesheet'>
        <link href="https://fonts.cdnfonts.com/css/aileron" rel="stylesheet">

        <!-- CSS-->
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.1/css/all.css" integrity="sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp" crossorigin="anonymous">

        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

        <!-- JQuery -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha384-Dziy8F2VlJQLMShA6FHWNul/veM9bCkRUaLqr199K94ntO5QUrLJBEbYegdSkkqX" crossorigin="anonymous"></script>

        <!-- Bootstrap JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

        <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
        <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

        <!-- Dropzone -->
        <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css" />

        <title><%= title %></title>
    </head>
    <body>
        <nav class="navbar navbar-expand-lg d-flex justify-content-between">
            <h1 id="admin-dashboard-title"><%= title %></h1>
            <div class="navbar-nav ms-auto">
                <div class="nav-item">
                    <a class="nav-link" href="/">Back to Home Page</a>
                </div>
            </div>
        </nav>
        <%
            if(data.length > 0)
            {
        %>
        <h2> <%= data[0].Description %></h2>
        <div class="container-basic-authentication" id="container-basic-authentication">
            <form action="/authenticate" method="POST" class="authenticate">
                <h3 class="formTitle">Please enter your details</h3>
                <div class="basic-form-error" id="basic-form-error"></div>
                    <label>Student Number : </label>
                    <input type="text" placeholder="Enter Student Number" name="studentno" required>
                    <label>First Name(s) : </label>
                    <input type="text" placeholder="Enter First Name(s)" name="fname" required>
                    <label>Last Name : </label>
                    <input type="text" placeholder="Enter Last Name" name="lname" required>
                    <label>Student Email : </label>
                    <input type="text" placeholder="Enter Email" name="email" required>
                    <br>
                    <button type="submit" value="authenticate" class="primaryBtn" id="authenticate-basic">NEXT</button>
            </form>
        </div>

        <div class="container-advanced-authentication" id="container-advanced-authentication">
            <div id="camera-container" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); display: none;">
            <video id="video" autoplay></video>
            <button id="startbutton">Take photo</button>
            <button id="cancelbutton">Cancel</button>
            </div>

            <div id="confirm-dialog" class="hidden">
            <img id="photo-preview" src="" alt="Taken photo">
            <button id="retake">Retake</button>
            <button id="confirm">Confirm</button>
            </div>

            <div id="errorMessageDiv" class="hidden">
                This image is not valid. Please try again.
            </div>

            <button class="cameraBtn" id="open-camera-btn">Open camera <i class="fas fa-camera"></i></button>
        </div>
        <%
            }
            else
            {
                %>
                <h1 class="blank-page">Invalid URL. Redirecting ...</h1>
                <script>
                    setTimeout(function() {
                        window.location.href = "/";
                    }, 2500);
                </script>
            <%
            }
        %>
    </body>
    <script>
        const authenticateBasicBtn = document.getElementById('authenticate-basic');
        const authenticateBasicContainer = document.getElementById('container-basic-authentication');
        const basicForm = document.querySelector('.authenticate');
        const basicFormError = document.getElementById('basic-form-error');
        const authenticateAdvancedContainer = document.getElementById('container-advanced-authentication');
        const id = '<%= data[0].Id %>';

        authenticateAdvancedContainer.classList.add('hidden');

        basicForm.addEventListener('submit', function(event) {
            event.preventDefault();
        });

        authenticateBasicBtn.addEventListener('click', () => {
            const formData = new FormData(basicForm);
            const body = new URLSearchParams(formData).toString();
                fetch(`/vote/${id}`, {
                method: 'POST',
                body: body,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.message === 'Basic details verified.') {
                    authenticateBasicContainer.classList.add('slide-out');
                    setTimeout(() => {
                        basicFormError.textContent = '';
                        authenticateBasicContainer.remove();
                        authenticateAdvancedContainer.classList.remove('hidden');
                        authenticateAdvancedContainer.classList.add('fade-in');
                    }, 1000);
                }
                else if (data.message === 'Invalid details.') {
                    basicFormError.textContent = 'Invalid details. Please try again.';
                }
            })
            .catch(error => {
                console.error(error);
            });
        });

        const openCameraBtn = document.getElementById('open-camera-btn');
        const cameraContainer = document.getElementById('camera-container');
        const video = document.getElementById('video');
        const startbutton = document.getElementById('startbutton');
        const cancelbutton = document.getElementById('cancelbutton');
        const confirmDialog = document.getElementById('confirm-dialog');
        const errorMessageDiv = document.getElementById('errorMessageDiv');
        const photoPreview = document.getElementById('photo-preview');
        const canvas = document.createElement('canvas');
        let stream = null;
        let data = null;

        confirmDialog.classList.add('hidden');
        errorMessageDiv.classList.add('hidden');

        openCameraBtn.addEventListener('click', function() {
            // Show camera container and hide other fields
            cameraContainer.style.display = 'block';
            errorMessageDiv.classList.add('hidden');
            authenticateAdvancedContainer.classList.add('camera-show');
            openCameraBtn.classList.add('hidden');

            // Get user media
            if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function(mediaStream) {
                    stream = mediaStream;
                    video.srcObject = mediaStream;
                    video.play();
                })
                .catch(function(err) {
                console.log("An error occurred: " + err);
                });
            }
        });

        // Take photo
        startbutton.addEventListener('click', function() {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
            data = canvas.toDataURL('image/png');
            video.pause();
            stream.getTracks()[0].stop();

            photoPreview.src = data;
            confirmDialog.classList.remove('hidden');
            cameraContainer.style.display = 'none';
        });

        const retakeButton = document.getElementById('retake');
        const confirmButton = document.getElementById('confirm');

        retakeButton.addEventListener('click', function () {
            confirmDialog.classList.add('hidden');
            // Show camera container
            cameraContainer.style.display = 'block';

            // Get user media
            if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function(mediaStream) {
                    stream = mediaStream;
                    video.srcObject = mediaStream;
                    video.play();
                })
                .catch(function(err) {
                console.log("An error occurred: " + err);
                });
            }
            photoPreview.src = '';
        });

        confirmButton.addEventListener('click', function () {
            // convert data to Blob object
            const byteString = atob(data.split(',')[1]);
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
            }
            const blob = new Blob([ab], { type: 'image/png' });

            // create FormData object and append file
            const imageFormData = new FormData();
            imageFormData.append('image', blob, 'image.png');

            fetch(`/vote/${id}/authenticate`, {
                method: 'POST',
                body: imageFormData
            })
            .then(response => response.json())
            .then(data => {
            if (data.message === 'Authentication successful') {
                console.log('success');
            } else {
                authenticateAdvancedContainer.classList.remove('camera-show');
                cameraContainer.style.display = 'none';
                confirmDialog.classList.add('hidden');
                errorMessageDiv.classList.remove('hidden');
                openCameraBtn.classList.remove('hidden');
            }
            })
            .catch(error => {
            console.error('Error uploading image:', error);
            });
        });

        // Cancel photo
        cancelbutton.addEventListener('click', function() {
            openCameraBtn.classList.remove('hidden');
            imageRegistration.classList.remove('camera-show');
            video.pause();
            video.srcObject.getTracks()[0].stop();
            cameraContainer.style.display = 'none';
            console.log('Video stream stopped');
        });
    </script>
</html>