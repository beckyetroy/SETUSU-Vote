<div class="card">
    <div class="card-header">Edit</div>
        <div class="card-body">
            <form action="/hj9h8765qzf5jizwwnua/edit/<%= data[0].Id %>" method="POST" id ="editElectionForm">  
                <div class="container">
                    <h3 class="formTitle" style="padding:2rem;">Editing <%= data[0].Description %> </h3>
                    <div class="basic-form-error" id="basic-form-error">
                    </div>
                    <div class="form-floating">
                    <input type="text" placeholder="Enter Name" name="electiondescription" id="electiondescription" class="form-control" value="<%= data[0].Description %>">
                        <label for="electiondescription">Election Name : </label>
                    </div>
    
                    <div class="form-floating">
                        <input type="date" name="electiondate" id="electiondate" value="<%= new Date(data[0].ElectionDate).toISOString().slice(0,10) %>" class="form-control">
                        <label for="electiondate">Election Date : </label>
                    </div>
    
                    <div class="form-floating">
                        <input type="time" name="electionopeningtime" id="electionopeningtime" value="<%= new Date(data[0].OpenTime).toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit', hour12: false}) %>" class="form-control">
                        <label for="electionopeningtime">Voting Opens : </label>
                    </div>
                    
                    <div class="form-floating">
                        <input type="time" name="electionclosingtime" id="electionclosingtime" value="<%= new Date(data[0].CloseTime).toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit', hour12: false}) %>" class="form-control">
                        <label for="electionclosingtime">Voting Closes : </label>
                    </div>
    
                    <div class="containerCategories" id="containerCategories">
                        <h5>Categories</h5>
                        <div class="form-floating">
                            <input type="text" placeholder="Enter Name" name="newcategoryname" id="newcategoryname" class="form-control">
                            <label for="newcategoryname">Category Name : </label>
                        </div>
                        <br>
                        <div class="form-floating">
                            <textarea placeholder="Enter Description" name="newcategorydescription" id="newcategorydescription" class="form-control" rows="8"></textarea>
                            <label for="newcategorydescription">Category Description : </label>
                        </div>
                        <br>
                        <input type="button" id="addCategory" class="addCategory" value="Add Category"></button>
                            <ol class="updatedCategoryList">
                                <%
                                categoryData = data.filter((v, i, a) => v.CategoryId !== null && a.findIndex(t => (t.CategoryId === v.CategoryId)) === i);
                                if (categoryData.length > 0) {
                                    categoryData.forEach(function(data){
                            %>
                                    <li>
                                        <div class="form-floating">
                                            <input type="text" placeholder="Enter Name"  value="<%= data.CategoryName %>" name="addedcategoryname" id="addedcategoryname" class="form-control">
                                            <label for="categoryname">Category Name : </label>
                                        </div>
                                        <br>
                                        <div class="form-floating">
                                            <textarea value="<%= data.CategoryDescription %>" name="addedcategorydescription" id="addedcategorydescription" class="form-control" rows="8"><%= data.CategoryDescription %></textarea>
                                            <label for="categorydescription">Category Description : </label>
                                        </div>
                                        <br>
                                        <button type="button" class="addCategory" style="float: right;" onclick="deleteCategory(event)">×</button>
                                    </li>
                            <%
                                });
                                }
                            %>
                            </ol>
                    </div>
                            <br>
                            <div class="container-image-upload" id="container-image-upload">
                                <div id="errorMessageDiv" class="errorMessageDiv hidden">
                                  <i class="fa fa-exclamation-circle" aria-hidden="true"></i> The image you submitted is not valid. Please try again.
                                </div>
                                <div class="upload-option">
                                  <h5>(Optional) Upload an Icon for this Election</h3>
                                  <p> This will appear as the thumbnail on the public page.
                                    <br><small>For the best result, please ensure it is square in shape.</small>
                                  </p>
                                  <div class="image-upload">
                                    <div id="my-dropzone" class="dropzone" style="width: 40%; height: 40%;">
                                        <% if (data[0].Icon_path) { %>
                                          <img id="election-icon" src="<%=data[0].Icon_path %>" alt="Election Icon" style="display:none;">
                                        <% } %>
                                    </div>
                                    <button class="primaryBtn" id="confirmBtn" disabled>Upload</button>
                                  </div>
                                </div>
                            </div>
                <script>
                    const updatedCategoryList = document.querySelector('.updatedCategoryList');
                    const addNewBtn = document.getElementById("addCategory");
                    const newCategoryName = document.getElementById('newcategoryname');
                    const newCategoryDescription = document.getElementById('newcategorydescription');
                    const buttons = document.getElementsByTagName("button");
                    let updatedCategories = [];

                    function deleteCategory(e) {
                        const parent = e.target.parentNode;
                        parent.remove();
                    }

                    function addCategory() {
                        const name = newCategoryName.value;
                        const description = newCategoryDescription.value;

                        if(name.length === 0 || description.length === 0) return;

                        const category = { name: name, description: description };

                        const btn = document.createElement('button');
                        btn.type = 'button';
                        btn.textContent = '×';
                        btn.classList.add('addCategory');
                        btn.style.float = 'right';
                        btn.addEventListener("click", (e) => deleteCategory(e));

                        const nameLabel = document.createElement('label');
                        nameLabel.textContent = "Category Name";
                        const nameField = document.createElement('input');
                        nameField.setAttribute("type","text");
                        nameField.setAttribute("value", name);
                        nameField.setAttribute("name","addedcategoryname");
                        nameField.setAttribute("id","addedcategoryname");

                        const descriptionLabel = document.createElement('label');
                        descriptionLabel.textContent = "Brief description: ";
                        const descriptionField = document.createElement('textarea');
                        descriptionField.textContent = description;
                        descriptionField.setAttribute("name","addedcategorydescription");
                        descriptionField.setAttribute("id","addedcategorydescription");

                        const li = document.createElement('li');
                        updatedCategoryList.append(li);
                        li.appendChild(nameLabel);
                        li.appendChild(nameField);
                        li.appendChild(descriptionLabel);
                        li.appendChild(descriptionField);
                        li.appendChild(btn);

                        newCategoryName.value = "";
                        newCategoryDescription.value = "";

                        li.classList.add('category-content');
                        li.appendChild(btn);
                    }

                    addNewBtn.addEventListener("click", addCategory);
                    const updateForm = document.getElementById("editElectionForm");

                    Dropzone.options.myDropzone = {
                        url: "/hj9h8765qzf5jizwwnua/upload-icon",
                        paramName: "image",
                        acceptedFiles: "image/*",
                        addRemoveLinks: true,
                        dictDefaultMessage: '<i class="fa fa-upload" aria-hidden="true"></i> <br> Drag & Drop Image here <br><span class="orMsg"> or </span><br> Click to Browse',
                        dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
                        dictInvalidFileType: "You can't upload files of this type.",
                        dictCancelUpload: "Cancel upload",
                        dictUploadCanceled: "Upload canceled.",
                        dictRemoveFile: "Remove file",
                        dictMaxFilesExceeded: "You can only upload a maximum of {{maxFiles}} file.",
                        maxFiles: 1,
                        autoProcessQueue: true,
                        init: function() {
                            var dz = this;

                            var defaultImage = document.querySelector('#election-icon');
                            if (defaultImage) {
                                var mockFile = { name: defaultImage.src, size: 0 };
                                dz.emit("addedfile", mockFile);
                                dz.emit("thumbnail", mockFile, defaultImage.src);
                                dz.emit("complete", mockFile);
                                var previewElement = mockFile.previewElement;
                                var previewImage = previewElement.querySelector("[data-dz-thumbnail]");
                                previewImage.setAttribute('width', '120px');
                                previewImage.setAttribute('height', '120px');
                            }

                            // Display thumbnail of the selected image
                            this.on("thumbnail", function(file, dataUrl) {
                                if (!errorMessageDiv.classList.contains('hidden')) {
                                    errorMessageDiv.classList.add('hidden');
                                }
                                var previewElement = file.previewElement;
                                previewElement.classList.remove("dz-file-preview");
                                var previewImage = previewElement.querySelector("[data-dz-thumbnail]");
                                previewImage.src = dataUrl;
                            });

                            // Handle upload errors
                            this.on("error", function(file, response) {
                                errorMessageDiv.classList.remove('hidden');
                                this.removeFile(file);
                            });

                            this.on("success", function(file, response) {
                                var input = document.createElement("input");
                                input.type = "hidden";
                                input.name = "picture";
                                input.value = response.filePath;
                                updateForm.appendChild(input);
                            });
                        }
                    };

                    updateForm.addEventListener("submit", function(e) {
                        e.preventDefault();
                        const categoryNameInputs = document.querySelectorAll('input[name="addedcategoryname"]');
                        const categoryDescInputs = document.querySelectorAll('textarea[name="addedcategorydescription"]');
                        console.log(categoryDescInputs);

                        categoryNameInputs.forEach((input, index) => {
                            const name = input.value;
                            const description = categoryDescInputs[index].value;
                            updatedCategories.push({ name, description });
                        });

                        const hiddenInput = document.createElement("input");
                        hiddenInput.type = "hidden";
                        hiddenInput.name = "updatedCategories";
                        hiddenInput.value = JSON.stringify(updatedCategories);

                        updateForm.appendChild(hiddenInput);
                        updateForm.submit();
                    });
                </script>
                    <button type="submit" value="edit" class="primaryBtn">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>